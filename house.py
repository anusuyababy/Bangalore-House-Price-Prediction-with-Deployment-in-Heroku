# -*- coding: utf-8 -*-
"""house

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1OzsT45uYkxRK72bds-FE1__J___PtPVh
"""

# Commented out IPython magic to ensure Python compatibility.
import re
import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
# %matplotlib inline
import seaborn as sns
pd.options.display.max_rows = 999

df=pd.read_csv('bhouse.csv')
df.head()

df.shape

df.isnull().sum()

df.info()

df.corr()

"""## Handling Missing values"""

df['balcony'].value_counts()

df['bath'].median()

df['balcony'] = df['balcony'].fillna(2.0)
df['bath'] = df['bath'].fillna(2.0)
df['bath'] = df['bath'].astype(int)
df['balcony'] = df['balcony'].astype(int)
df.head()

df.total_sqft.unique()

def num(x):
    try:
        float (x)
    except:
        return False
    return True

df[~df['total_sqft'].apply(num)].tail(5)

def convert_to_num(x):
    y=x.split(' - ') 
    if (len(y)>1):
        return (float(y[0])+float(y[1]))/2
    try:
        return float(x)
    except:
        return None

#df['total_sqft'] = df['total_sqft'].apply(lambda x: x.split(' - ')[1] if (len(x.split(' - ')))>1 else x.split(' - ')[0]) 
df['total_sqft'] = df.total_sqft.apply(convert_to_num)
df.head()

#df['total_sqft'] = df['total_sqft'].apply(lambda x: re.findall(r'\d+',x)[0])
df = df.dropna(subset=['total_sqft'])
df.head()

df['size'].unique()

df['size'] = df['size'].str.replace('Bedroom', '').str.replace('RK', '').str.replace('BHK', '')
df['size'] = df['size'].fillna(2)
df['size'] = df['size'].astype(int)
df.head()

df['size'].unique()

df[df['size']>26]

df.drop([1718,4684], inplace=True)
df.head()

df['size'].unique()

df['location']= df['location'].fillna('Whitefield')
df['society']= df['society'].fillna('Other')
df.head()

df.isnull().sum()

df.head()

df=df.drop(['society', 'availability'], axis = 1)
df.head()

dummy_cols = pd.get_dummies(df.area_type)
df = pd.concat([df,dummy_cols], axis='columns')

df.head()

s=df['location'].value_counts()
s

print(len(s[s>11]))

r = s[s<11]
df.location = df.location.apply(lambda x: 'other' if x in r else x)
len(df.location.unique())

df.head()

dummy_cols = pd.get_dummies(df.location)
df = pd.concat([df,dummy_cols], axis='columns')

df.drop(['location', 'area_type'], axis='columns', inplace=True)
df.head()

df[(df['total_sqft']<450)]

df = df.drop(df[(df['total_sqft']<450)].index)
df.head()

len(df)

df[(df['total_sqft']>10000)]

df = df.drop(df[(df['total_sqft']>10000)].index)
df.head()

len(df)

df[(df['total_sqft']<1000) & (df['bath']>3) & (df['size']>2)]

df = df.drop(df[(df['total_sqft']<1000) & (df['bath']>3) & (df['size']>2)].index)
df.head()

df.shape

df[(df['total_sqft']<2000) & (df['bath']>5) & (df['size']>4)]

df = df.drop(df[(df['total_sqft']<2000) & (df['bath']>5) & (df['size']>4)].index)
df.head()

df.shape

df[(df['total_sqft']<600) & (df['bath']>2) & (df['size']>1)]

df = df.drop(df[(df['total_sqft']<600) & (df['bath']>2) & (df['size']>1)].index)
df.head()

df[(df['price']>100) & (df['total_sqft']<1000)]

df = df.drop(df[(df['price']>100) & (df['total_sqft']<1000)].index)
df.head()

df[(df['price']>1000)]

df = df.drop(df[(df['price']>1000)].index)
df.head()

df[(df['price']>500)]

df[(df['total_sqft']<1000) & (df['bath']>3)]

df = df.drop(df[(df['total_sqft']<1000) & (df['bath']>3)].index)
df.head()

df[(df['bath']==2) & (df['size']>3)]

df = df.drop(df[(df['bath']==2) & (df['size']>3)].index)
df.head()

df[(df['bath']==3) & (df['size']>4)]

df = df.drop(df[(df['bath']==3) & (df['size']>4)].index)
df.head()

df[(df['total_sqft']<3000) & (df['bath']>7) & (df['size']>6)]

df = df.drop(df[(df['total_sqft']<3000) & (df['bath']>7) & (df['size']>6)].index)
df.head()

df[(df['total_sqft']<1000)]

df[(df['total_sqft']<1000) & (df['size']>2)]

df = df.drop(df[(df['total_sqft']<1000) & (df['size']>2)].index)
df.head()

df.shape

df[(df['bath'] == 1) & (df['size']>2)]

df = df.drop(df[(df['bath'] == 1) & (df['size']>=2)].index)
df.head()

df[(df['bath']>9)]

df.drop([1078], inplace=True)
df.head()

df[(df['bath']>df['size'])]

df[(df['bath']==6)&(df['size']<=4)]

df = df.drop(df[(df['bath']==6)&(df['size']<=4)].index)
df.head()

df[(df['bath']==5)&(df['size']<=3)]

df = df.drop(df[(df['bath']==5)&(df['size']<=3)].index)
df.head()

df[(df['bath']==7)&(df['size']<=5)]

df = df.drop(df[(df['bath']==7)&(df['size']<=5)].index)
df.head()

df.shape

u = df['total_sqft'].mean()+3*df['total_sqft'].std()
l = df['total_sqft'].mean()-3*df['total_sqft'].std()
u,l

IQR = df['total_sqft'].quantile(0.75) - df['total_sqft'].quantile(0.25) 
IQR

l = df['total_sqft'].quantile(0.25)-(3*IQR)
u = df['total_sqft'].quantile(0.75)+(3*IQR)
u,l

IQR = df['price'].quantile(0.75) - df['price'].quantile(0.25) 
IQR

l = df['price'].quantile(0.25)-(3*IQR)
u = df['price'].quantile(0.75)+(3*IQR)
u,l

u = df['bath'].mean()+3*df['bath'].std()
l = df['bath'].mean()-3*df['bath'].std()
u,l

IQR = df['bath'].quantile(0.75) - df['bath'].quantile(0.25) 
IQR

l = df['bath'].quantile(0.25)-(3*IQR)
u = df['bath'].quantile(0.75)+(3*IQR)
u,l

u = df['size'].mean()+3*df['size'].std()
l = df['size'].mean()-3*df['size'].std()
u,l

IQR = df['size'].quantile(0.75) - df['size'].quantile(0.25) 
IQR

l = df['size'].quantile(0.25)-(3*IQR)
u = df['size'].quantile(0.75)+(3*IQR)
u,l

df[(df['price']>=500)]

df = df.drop(df[(df['price']>=500)].index)
df.head()

df[(df['total_sqft']>4000) & (df['size']>6) & (df['bath']>6)]

df = df.drop(df[(df['total_sqft']>4000) & (df['size']>6) & (df['bath']>6)].index)
df.head()

df.shape

df[(df['bath']==4)&(df['size']==6)]

df = df.drop(df[(df['bath']==4)&(df['size']==6)].index)
df.head()

df[(df['total_sqft']>4000)]

df = df.drop(df[(df['total_sqft']>4000)].index)
df.head()

df[(df['size']>6) & (df['bath']>6)]

df = df.drop(df[(df['size']>6) & (df['bath']>6)].index)
df.head()

df[(df['bath']>=7)]

df = df.drop(df[(df['bath']>=7)].index)
df.head()

df[(df['size']>6)]

df = df.drop(df[(df['size']>6)].index)
df.head()

df.balcony.unique()

df[(df['size']==2) & (df['balcony']==3)]

df = df.drop(df[(df['size']==2) & (df['balcony']==3)].index)
df.head()

df[(df['size']==1) & (df['balcony']==2)]

df = df.drop(df[(df['size']==1) & (df['balcony']==2)].index)
df.head()

df.shape

x=df.drop(['price'], axis = 1)
y=df['price']
x.shape, y.shape

x.head()

from sklearn.model_selection import train_test_split
x_train,x_test, y_train, y_test = train_test_split(x,y, test_size =0.20, random_state = 3)

from sklearn.ensemble import GradientBoostingRegressor
clf=GradientBoostingRegressor(n_estimators = 400, max_depth = 5, min_samples_split = 2, learning_rate = 0.1)
clf.fit(x_train,y_train)

import json
columns = {
    'data_columns' : [col.lower() for col in x.columns]
}
with open("columns.json","w") as f:
    f.write(json.dumps(columns))

import pickle
pickle.dump(clf, open('model.pkl', 'wb'))